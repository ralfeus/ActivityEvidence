//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18034.
// 
#pragma warning disable 1591

namespace ActivityEvidence.EvidenceService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ActivitiesEvidenceSoap", Namespace="http://activity.evidence.cz.ibm.com/")]
    public partial class ActivitiesEvidence : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetCustomersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOvertimeTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastActivitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTodayWorkDurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivitiesForClaimOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultClaimCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateActivityForClaimOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOncallScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOncallStandbyGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicHolidaysOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ActivitiesEvidence() {
            this.Url = "http://0.0.0.0/activities_evidence/service.php";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCustomersCompletedEventHandler GetCustomersCompleted;
        
        /// <remarks/>
        public event GetActivitiesCompletedEventHandler GetActivitiesCompleted;
        
        /// <remarks/>
        public event GetOvertimeTypesCompletedEventHandler GetOvertimeTypesCompleted;
        
        /// <remarks/>
        public event SendActivityCompletedEventHandler SendActivityCompleted;
        
        /// <remarks/>
        public event UpdateActivityCompletedEventHandler UpdateActivityCompleted;
        
        /// <remarks/>
        public event DeleteActivityCompletedEventHandler DeleteActivityCompleted;
        
        /// <remarks/>
        public event GetLastActivitiesCompletedEventHandler GetLastActivitiesCompleted;
        
        /// <remarks/>
        public event GetTodayWorkDurationCompletedEventHandler GetTodayWorkDurationCompleted;
        
        /// <remarks/>
        public event GetActivitiesForClaimCompletedEventHandler GetActivitiesForClaimCompleted;
        
        /// <remarks/>
        public event GetDefaultClaimCodeCompletedEventHandler GetDefaultClaimCodeCompleted;
        
        /// <remarks/>
        public event UpdateActivityForClaimCompletedEventHandler UpdateActivityForClaimCompleted;
        
        /// <remarks/>
        public event SendInformationCompletedEventHandler SendInformationCompleted;
        
        /// <remarks/>
        public event GetOncallScheduleCompletedEventHandler GetOncallScheduleCompleted;
        
        /// <remarks/>
        public event GetOncallStandbyGroupsCompletedEventHandler GetOncallStandbyGroupsCompleted;
        
        /// <remarks/>
        public event GetPublicHolidaysCompletedEventHandler GetPublicHolidaysCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/GetCustomers", RequestElementName="GetCustomersRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", ResponseNamespace="http://activity.evidence.cz.ibm.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Customers")]
        public ObjectStruct[] GetCustomers(string AdminID) {
            object[] results = this.Invoke("GetCustomers", new object[] {
                        AdminID});
            return ((ObjectStruct[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCustomers(string AdminID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCustomers", new object[] {
                        AdminID}, callback, asyncState);
        }
        
        /// <remarks/>
        public ObjectStruct[] EndGetCustomers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ObjectStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomersAsync(string AdminID) {
            this.GetCustomersAsync(AdminID, null);
        }
        
        /// <remarks/>
        public void GetCustomersAsync(string AdminID, object userState) {
            if ((this.GetCustomersOperationCompleted == null)) {
                this.GetCustomersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomersOperationCompleted);
            }
            this.InvokeAsync("GetCustomers", new object[] {
                        AdminID}, this.GetCustomersOperationCompleted, userState);
        }
        
        private void OnGetCustomersOperationCompleted(object arg) {
            if ((this.GetCustomersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomersCompleted(this, new GetCustomersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/GetActivities", RequestElementName="GetActivitiesRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", ResponseNamespace="http://activity.evidence.cz.ibm.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Activities")]
        public ObjectStruct[] GetActivities(string AdminID) {
            object[] results = this.Invoke("GetActivities", new object[] {
                        AdminID});
            return ((ObjectStruct[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivities(string AdminID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivities", new object[] {
                        AdminID}, callback, asyncState);
        }
        
        /// <remarks/>
        public ObjectStruct[] EndGetActivities(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ObjectStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActivitiesAsync(string AdminID) {
            this.GetActivitiesAsync(AdminID, null);
        }
        
        /// <remarks/>
        public void GetActivitiesAsync(string AdminID, object userState) {
            if ((this.GetActivitiesOperationCompleted == null)) {
                this.GetActivitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivitiesOperationCompleted);
            }
            this.InvokeAsync("GetActivities", new object[] {
                        AdminID}, this.GetActivitiesOperationCompleted, userState);
        }
        
        private void OnGetActivitiesOperationCompleted(object arg) {
            if ((this.GetActivitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivitiesCompleted(this, new GetActivitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/OvertimeTypes", RequestElementName="GetOvertimeTypesRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", ResponseNamespace="http://activity.evidence.cz.ibm.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("OvertimeTypes")]
        public ObjectStruct[] GetOvertimeTypes(string AdminID) {
            object[] results = this.Invoke("GetOvertimeTypes", new object[] {
                        AdminID});
            return ((ObjectStruct[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOvertimeTypes(string AdminID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOvertimeTypes", new object[] {
                        AdminID}, callback, asyncState);
        }
        
        /// <remarks/>
        public ObjectStruct[] EndGetOvertimeTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ObjectStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOvertimeTypesAsync(string AdminID) {
            this.GetOvertimeTypesAsync(AdminID, null);
        }
        
        /// <remarks/>
        public void GetOvertimeTypesAsync(string AdminID, object userState) {
            if ((this.GetOvertimeTypesOperationCompleted == null)) {
                this.GetOvertimeTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOvertimeTypesOperationCompleted);
            }
            this.InvokeAsync("GetOvertimeTypes", new object[] {
                        AdminID}, this.GetOvertimeTypesOperationCompleted, userState);
        }
        
        private void OnGetOvertimeTypesOperationCompleted(object arg) {
            if ((this.GetOvertimeTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOvertimeTypesCompleted(this, new GetOvertimeTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/SendActivity", RequestElementName="SendActivityRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendActivity(string AdminID, int CustomerID, int ActivityID, System.DateTime StartTime, int Duration, bool HasTicket, string TicketNumber, string Comment, int OvertimeType) {
            this.Invoke("SendActivity", new object[] {
                        AdminID,
                        CustomerID,
                        ActivityID,
                        StartTime,
                        Duration,
                        HasTicket,
                        TicketNumber,
                        Comment,
                        OvertimeType});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendActivity(string AdminID, int CustomerID, int ActivityID, System.DateTime StartTime, int Duration, bool HasTicket, string TicketNumber, string Comment, int OvertimeType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendActivity", new object[] {
                        AdminID,
                        CustomerID,
                        ActivityID,
                        StartTime,
                        Duration,
                        HasTicket,
                        TicketNumber,
                        Comment,
                        OvertimeType}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSendActivity(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SendActivityAsync(string AdminID, int CustomerID, int ActivityID, System.DateTime StartTime, int Duration, bool HasTicket, string TicketNumber, string Comment, int OvertimeType) {
            this.SendActivityAsync(AdminID, CustomerID, ActivityID, StartTime, Duration, HasTicket, TicketNumber, Comment, OvertimeType, null);
        }
        
        /// <remarks/>
        public void SendActivityAsync(string AdminID, int CustomerID, int ActivityID, System.DateTime StartTime, int Duration, bool HasTicket, string TicketNumber, string Comment, int OvertimeType, object userState) {
            if ((this.SendActivityOperationCompleted == null)) {
                this.SendActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendActivityOperationCompleted);
            }
            this.InvokeAsync("SendActivity", new object[] {
                        AdminID,
                        CustomerID,
                        ActivityID,
                        StartTime,
                        Duration,
                        HasTicket,
                        TicketNumber,
                        Comment,
                        OvertimeType}, this.SendActivityOperationCompleted, userState);
        }
        
        private void OnSendActivityOperationCompleted(object arg) {
            if ((this.SendActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/UpdateActivity", RequestElementName="UpdateActivityRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", ResponseNamespace="http://activity.evidence.cz.ibm.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateActivity(ActivityReportStruct ActivityEntry, out bool Result, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ResultSpecified) {
            object[] results = this.Invoke("UpdateActivity", new object[] {
                        ActivityEntry});
            Result = ((bool)(results[0]));
            ResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateActivity(ActivityReportStruct ActivityEntry, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateActivity", new object[] {
                        ActivityEntry}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateActivity(System.IAsyncResult asyncResult, out bool Result, out bool ResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            Result = ((bool)(results[0]));
            ResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void UpdateActivityAsync(ActivityReportStruct ActivityEntry) {
            this.UpdateActivityAsync(ActivityEntry, null);
        }
        
        /// <remarks/>
        public void UpdateActivityAsync(ActivityReportStruct ActivityEntry, object userState) {
            if ((this.UpdateActivityOperationCompleted == null)) {
                this.UpdateActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateActivityOperationCompleted);
            }
            this.InvokeAsync("UpdateActivity", new object[] {
                        ActivityEntry}, this.UpdateActivityOperationCompleted, userState);
        }
        
        private void OnUpdateActivityOperationCompleted(object arg) {
            if ((this.UpdateActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateActivityCompleted(this, new UpdateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/DeleteActivity", RequestElementName="DeleteActivityRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteActivity(int ActivityID) {
            this.Invoke("DeleteActivity", new object[] {
                        ActivityID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteActivity(int ActivityID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteActivity", new object[] {
                        ActivityID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteActivity(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteActivityAsync(int ActivityID) {
            this.DeleteActivityAsync(ActivityID, null);
        }
        
        /// <remarks/>
        public void DeleteActivityAsync(int ActivityID, object userState) {
            if ((this.DeleteActivityOperationCompleted == null)) {
                this.DeleteActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteActivityOperationCompleted);
            }
            this.InvokeAsync("DeleteActivity", new object[] {
                        ActivityID}, this.DeleteActivityOperationCompleted, userState);
        }
        
        private void OnDeleteActivityOperationCompleted(object arg) {
            if ((this.DeleteActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/GetLastActivities", RequestElementName="GetLastActivitiesRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", ResponseNamespace="http://activity.evidence.cz.ibm.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Entries")]
        public ActivityReportStruct[] GetLastActivities(string AdminID) {
            object[] results = this.Invoke("GetLastActivities", new object[] {
                        AdminID});
            return ((ActivityReportStruct[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLastActivities(string AdminID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLastActivities", new object[] {
                        AdminID}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActivityReportStruct[] EndGetLastActivities(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActivityReportStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLastActivitiesAsync(string AdminID) {
            this.GetLastActivitiesAsync(AdminID, null);
        }
        
        /// <remarks/>
        public void GetLastActivitiesAsync(string AdminID, object userState) {
            if ((this.GetLastActivitiesOperationCompleted == null)) {
                this.GetLastActivitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastActivitiesOperationCompleted);
            }
            this.InvokeAsync("GetLastActivities", new object[] {
                        AdminID}, this.GetLastActivitiesOperationCompleted, userState);
        }
        
        private void OnGetLastActivitiesOperationCompleted(object arg) {
            if ((this.GetLastActivitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastActivitiesCompleted(this, new GetLastActivitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/GetTodayWorkDuration", RequestElementName="GetTodayWorkDurationRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", ResponseNamespace="http://activity.evidence.cz.ibm.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("WorkDuration")]
        public int GetTodayWorkDuration(string AdminID) {
            object[] results = this.Invoke("GetTodayWorkDuration", new object[] {
                        AdminID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTodayWorkDuration(string AdminID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTodayWorkDuration", new object[] {
                        AdminID}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetTodayWorkDuration(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTodayWorkDurationAsync(string AdminID) {
            this.GetTodayWorkDurationAsync(AdminID, null);
        }
        
        /// <remarks/>
        public void GetTodayWorkDurationAsync(string AdminID, object userState) {
            if ((this.GetTodayWorkDurationOperationCompleted == null)) {
                this.GetTodayWorkDurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTodayWorkDurationOperationCompleted);
            }
            this.InvokeAsync("GetTodayWorkDuration", new object[] {
                        AdminID}, this.GetTodayWorkDurationOperationCompleted, userState);
        }
        
        private void OnGetTodayWorkDurationOperationCompleted(object arg) {
            if ((this.GetTodayWorkDurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTodayWorkDurationCompleted(this, new GetTodayWorkDurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/GetActivitiesForClaim", RequestElementName="GetActivitiesForClaimRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", ResponseNamespace="http://activity.evidence.cz.ibm.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Entries")]
        public ClaimStruct[] GetActivitiesForClaim(string AdminID, string ClientVersion, System.DateTime PeriodBegin) {
            object[] results = this.Invoke("GetActivitiesForClaim", new object[] {
                        AdminID,
                        ClientVersion,
                        PeriodBegin});
            return ((ClaimStruct[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivitiesForClaim(string AdminID, string ClientVersion, System.DateTime PeriodBegin, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivitiesForClaim", new object[] {
                        AdminID,
                        ClientVersion,
                        PeriodBegin}, callback, asyncState);
        }
        
        /// <remarks/>
        public ClaimStruct[] EndGetActivitiesForClaim(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ClaimStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActivitiesForClaimAsync(string AdminID, string ClientVersion, System.DateTime PeriodBegin) {
            this.GetActivitiesForClaimAsync(AdminID, ClientVersion, PeriodBegin, null);
        }
        
        /// <remarks/>
        public void GetActivitiesForClaimAsync(string AdminID, string ClientVersion, System.DateTime PeriodBegin, object userState) {
            if ((this.GetActivitiesForClaimOperationCompleted == null)) {
                this.GetActivitiesForClaimOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivitiesForClaimOperationCompleted);
            }
            this.InvokeAsync("GetActivitiesForClaim", new object[] {
                        AdminID,
                        ClientVersion,
                        PeriodBegin}, this.GetActivitiesForClaimOperationCompleted, userState);
        }
        
        private void OnGetActivitiesForClaimOperationCompleted(object arg) {
            if ((this.GetActivitiesForClaimCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivitiesForClaimCompleted(this, new GetActivitiesForClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/GetDefaultClaimCode", RequestElementName="GetDefaultClaimCodeRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", ResponseNamespace="http://activity.evidence.cz.ibm.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ClaimCode")]
        public ClaimCode GetDefaultClaimCode(string AdminID, string ClientVersion) {
            object[] results = this.Invoke("GetDefaultClaimCode", new object[] {
                        AdminID,
                        ClientVersion});
            return ((ClaimCode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDefaultClaimCode(string AdminID, string ClientVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDefaultClaimCode", new object[] {
                        AdminID,
                        ClientVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public ClaimCode EndGetDefaultClaimCode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ClaimCode)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultClaimCodeAsync(string AdminID, string ClientVersion) {
            this.GetDefaultClaimCodeAsync(AdminID, ClientVersion, null);
        }
        
        /// <remarks/>
        public void GetDefaultClaimCodeAsync(string AdminID, string ClientVersion, object userState) {
            if ((this.GetDefaultClaimCodeOperationCompleted == null)) {
                this.GetDefaultClaimCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultClaimCodeOperationCompleted);
            }
            this.InvokeAsync("GetDefaultClaimCode", new object[] {
                        AdminID,
                        ClientVersion}, this.GetDefaultClaimCodeOperationCompleted, userState);
        }
        
        private void OnGetDefaultClaimCodeOperationCompleted(object arg) {
            if ((this.GetDefaultClaimCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultClaimCodeCompleted(this, new GetDefaultClaimCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/UpdateActivityForClaim", RequestElementName="UpdateActivityForClaimRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateActivityForClaim(string AdminID, string ClientVersion, ClaimStruct Activity) {
            this.Invoke("UpdateActivityForClaim", new object[] {
                        AdminID,
                        ClientVersion,
                        Activity});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateActivityForClaim(string AdminID, string ClientVersion, ClaimStruct Activity, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateActivityForClaim", new object[] {
                        AdminID,
                        ClientVersion,
                        Activity}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateActivityForClaim(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateActivityForClaimAsync(string AdminID, string ClientVersion, ClaimStruct Activity) {
            this.UpdateActivityForClaimAsync(AdminID, ClientVersion, Activity, null);
        }
        
        /// <remarks/>
        public void UpdateActivityForClaimAsync(string AdminID, string ClientVersion, ClaimStruct Activity, object userState) {
            if ((this.UpdateActivityForClaimOperationCompleted == null)) {
                this.UpdateActivityForClaimOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateActivityForClaimOperationCompleted);
            }
            this.InvokeAsync("UpdateActivityForClaim", new object[] {
                        AdminID,
                        ClientVersion,
                        Activity}, this.UpdateActivityForClaimOperationCompleted, userState);
        }
        
        private void OnUpdateActivityForClaimOperationCompleted(object arg) {
            if ((this.UpdateActivityForClaimCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateActivityForClaimCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/SendInformation", RequestElementName="SendInformationRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendInformation(string AdminID, [System.Xml.Serialization.XmlElementAttribute("Information")] string[] Information) {
            this.Invoke("SendInformation", new object[] {
                        AdminID,
                        Information});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendInformation(string AdminID, string[] Information, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendInformation", new object[] {
                        AdminID,
                        Information}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSendInformation(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SendInformationAsync(string AdminID, string[] Information) {
            this.SendInformationAsync(AdminID, Information, null);
        }
        
        /// <remarks/>
        public void SendInformationAsync(string AdminID, string[] Information, object userState) {
            if ((this.SendInformationOperationCompleted == null)) {
                this.SendInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInformationOperationCompleted);
            }
            this.InvokeAsync("SendInformation", new object[] {
                        AdminID,
                        Information}, this.SendInformationOperationCompleted, userState);
        }
        
        private void OnSendInformationOperationCompleted(object arg) {
            if ((this.SendInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInformationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/GetOncallSchedule", RequestElementName="GetOncallScheduleRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", ResponseNamespace="http://activity.evidence.cz.ibm.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DateMap")]
        public OncallDateStruct[] GetOncallSchedule(string AdminID, string ClientVersion, System.DateTime PeriodBegin, System.DateTime PeriodEnd) {
            object[] results = this.Invoke("GetOncallSchedule", new object[] {
                        AdminID,
                        ClientVersion,
                        PeriodBegin,
                        PeriodEnd});
            return ((OncallDateStruct[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOncallSchedule(string AdminID, string ClientVersion, System.DateTime PeriodBegin, System.DateTime PeriodEnd, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOncallSchedule", new object[] {
                        AdminID,
                        ClientVersion,
                        PeriodBegin,
                        PeriodEnd}, callback, asyncState);
        }
        
        /// <remarks/>
        public OncallDateStruct[] EndGetOncallSchedule(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OncallDateStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOncallScheduleAsync(string AdminID, string ClientVersion, System.DateTime PeriodBegin, System.DateTime PeriodEnd) {
            this.GetOncallScheduleAsync(AdminID, ClientVersion, PeriodBegin, PeriodEnd, null);
        }
        
        /// <remarks/>
        public void GetOncallScheduleAsync(string AdminID, string ClientVersion, System.DateTime PeriodBegin, System.DateTime PeriodEnd, object userState) {
            if ((this.GetOncallScheduleOperationCompleted == null)) {
                this.GetOncallScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOncallScheduleOperationCompleted);
            }
            this.InvokeAsync("GetOncallSchedule", new object[] {
                        AdminID,
                        ClientVersion,
                        PeriodBegin,
                        PeriodEnd}, this.GetOncallScheduleOperationCompleted, userState);
        }
        
        private void OnGetOncallScheduleOperationCompleted(object arg) {
            if ((this.GetOncallScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOncallScheduleCompleted(this, new GetOncallScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/GetOncallStandbyGroups", RequestElementName="GetOncallStandbyGroupsRequest", RequestNamespace="http://activity.evidence.cz.ibm.com/", ResponseNamespace="http://activity.evidence.cz.ibm.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public ClaimCode[] GetOncallStandbyGroups(string AdminID, string ClientVersion) {
            object[] results = this.Invoke("GetOncallStandbyGroups", new object[] {
                        AdminID,
                        ClientVersion});
            return ((ClaimCode[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOncallStandbyGroups(string AdminID, string ClientVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOncallStandbyGroups", new object[] {
                        AdminID,
                        ClientVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public ClaimCode[] EndGetOncallStandbyGroups(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ClaimCode[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOncallStandbyGroupsAsync(string AdminID, string ClientVersion) {
            this.GetOncallStandbyGroupsAsync(AdminID, ClientVersion, null);
        }
        
        /// <remarks/>
        public void GetOncallStandbyGroupsAsync(string AdminID, string ClientVersion, object userState) {
            if ((this.GetOncallStandbyGroupsOperationCompleted == null)) {
                this.GetOncallStandbyGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOncallStandbyGroupsOperationCompleted);
            }
            this.InvokeAsync("GetOncallStandbyGroups", new object[] {
                        AdminID,
                        ClientVersion}, this.GetOncallStandbyGroupsOperationCompleted, userState);
        }
        
        private void OnGetOncallStandbyGroupsOperationCompleted(object arg) {
            if ((this.GetOncallStandbyGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOncallStandbyGroupsCompleted(this, new GetOncallStandbyGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://activity.evidence.cz.ibm.com/GetPublicHolidays", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetPublicHolidaysResponse", Namespace="http://activity.evidence.cz.ibm.com/")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("Holiday", IsNullable=false)]
        public System.DateTime[] GetPublicHolidays() {
            object[] results = this.Invoke("GetPublicHolidays", new object[0]);
            return ((System.DateTime[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPublicHolidays(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPublicHolidays", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime[] EndGetPublicHolidays(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPublicHolidaysAsync() {
            this.GetPublicHolidaysAsync(null);
        }
        
        /// <remarks/>
        public void GetPublicHolidaysAsync(object userState) {
            if ((this.GetPublicHolidaysOperationCompleted == null)) {
                this.GetPublicHolidaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicHolidaysOperationCompleted);
            }
            this.InvokeAsync("GetPublicHolidays", new object[0], this.GetPublicHolidaysOperationCompleted, userState);
        }
        
        private void OnGetPublicHolidaysOperationCompleted(object arg) {
            if ((this.GetPublicHolidaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicHolidaysCompleted(this, new GetPublicHolidaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://activity.evidence.cz.ibm.com/")]
    public partial class ObjectStruct {
        
        private int objectIDField;
        
        private string objectNameField;
        
        /// <remarks/>
        public int ObjectID {
            get {
                return this.objectIDField;
            }
            set {
                this.objectIDField = value;
            }
        }
        
        /// <remarks/>
        public string ObjectName {
            get {
                return this.objectNameField;
            }
            set {
                this.objectNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://activity.evidence.cz.ibm.com/")]
    public partial class OncallDateStruct {
        
        private System.DateTime dateField;
        
        private int oncallHoursField;
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public int OncallHours {
            get {
                return this.oncallHoursField;
            }
            set {
                this.oncallHoursField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://activity.evidence.cz.ibm.com/")]
    public partial class ClaimCode {
        
        private string accountField;
        
        private string workItemField;
        
        private bool calledInField;
        
        private bool calledInFieldSpecified;
        
        private bool overtimeField;
        
        private bool overtimeFieldSpecified;
        
        private string descriptionField;
        
        /// <remarks/>
        public string Account {
            get {
                return this.accountField;
            }
            set {
                this.accountField = value;
            }
        }
        
        /// <remarks/>
        public string WorkItem {
            get {
                return this.workItemField;
            }
            set {
                this.workItemField = value;
            }
        }
        
        /// <remarks/>
        public bool CalledIn {
            get {
                return this.calledInField;
            }
            set {
                this.calledInField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CalledInSpecified {
            get {
                return this.calledInFieldSpecified;
            }
            set {
                this.calledInFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool Overtime {
            get {
                return this.overtimeField;
            }
            set {
                this.overtimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OvertimeSpecified {
            get {
                return this.overtimeFieldSpecified;
            }
            set {
                this.overtimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://activity.evidence.cz.ibm.com/")]
    public partial class ClaimStruct {
        
        private ActivityReportStruct activityField;
        
        private bool standardClaimField;
        
        private bool plannedOvertimeField;
        
        private ClaimCode claimCodeField;
        
        /// <remarks/>
        public ActivityReportStruct Activity {
            get {
                return this.activityField;
            }
            set {
                this.activityField = value;
            }
        }
        
        /// <remarks/>
        public bool StandardClaim {
            get {
                return this.standardClaimField;
            }
            set {
                this.standardClaimField = value;
            }
        }
        
        /// <remarks/>
        public bool PlannedOvertime {
            get {
                return this.plannedOvertimeField;
            }
            set {
                this.plannedOvertimeField = value;
            }
        }
        
        /// <remarks/>
        public ClaimCode ClaimCode {
            get {
                return this.claimCodeField;
            }
            set {
                this.claimCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://activity.evidence.cz.ibm.com/")]
    public partial class ActivityReportStruct {
        
        private int idField;
        
        private string customerField;
        
        private string activityField;
        
        private System.DateTime startTimeField;
        
        private int workDurationField;
        
        private string ticketNumberField;
        
        private string commentField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Customer {
            get {
                return this.customerField;
            }
            set {
                this.customerField = value;
            }
        }
        
        /// <remarks/>
        public string Activity {
            get {
                return this.activityField;
            }
            set {
                this.activityField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        public int WorkDuration {
            get {
                return this.workDurationField;
            }
            set {
                this.workDurationField = value;
            }
        }
        
        /// <remarks/>
        public string TicketNumber {
            get {
                return this.ticketNumberField;
            }
            set {
                this.ticketNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCustomersCompletedEventHandler(object sender, GetCustomersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ObjectStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ObjectStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetActivitiesCompletedEventHandler(object sender, GetActivitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ObjectStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ObjectStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetOvertimeTypesCompletedEventHandler(object sender, GetOvertimeTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOvertimeTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOvertimeTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ObjectStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ObjectStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendActivityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateActivityCompletedEventHandler(object sender, UpdateActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteActivityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLastActivitiesCompletedEventHandler(object sender, GetLastActivitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ActivityReportStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActivityReportStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTodayWorkDurationCompletedEventHandler(object sender, GetTodayWorkDurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTodayWorkDurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTodayWorkDurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetActivitiesForClaimCompletedEventHandler(object sender, GetActivitiesForClaimCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivitiesForClaimCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivitiesForClaimCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClaimStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClaimStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDefaultClaimCodeCompletedEventHandler(object sender, GetDefaultClaimCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultClaimCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultClaimCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClaimCode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClaimCode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateActivityForClaimCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendInformationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetOncallScheduleCompletedEventHandler(object sender, GetOncallScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOncallScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOncallScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OncallDateStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OncallDateStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetOncallStandbyGroupsCompletedEventHandler(object sender, GetOncallStandbyGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOncallStandbyGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOncallStandbyGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClaimCode[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClaimCode[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPublicHolidaysCompletedEventHandler(object sender, GetPublicHolidaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublicHolidaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublicHolidaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591